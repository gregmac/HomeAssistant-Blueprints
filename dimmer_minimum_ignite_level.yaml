blueprint:
  name: "Dimmer Minimum Ignite Level"
  author: gregmac
  domain: automation
  description: >
    Ensures that when a light is turned on to a brightness that is too low to make it actually light up,
    that it is temporarily set to a higher value (to get it to turn on) before being lowered back down
    to the desired brightness.


    For example, if a LED bulb is first turned on to 3%, it often won't light up at all. This automation
    will set it to 20% (configurable) for about a second, before dimming it back down to 3%, where it
    will stay light at a low level.


    This happens based on state change, so works with lights no matter how they are controlled, including
    other automations and scenes.
  source_url: https://github.com/gregmac/HomeAssistant-Blueprints/blob/main/dimmer_minimum_ignite_level.yaml

  input:
    light:
      name: Light
      description: The light to be controlled
      selector:
        entity:
          domain: light
      # note: multiple not supported due to requiring 'single' mode

    min_ignite_brightness:
      name: Minimum level needed to turn light on
      description: >-
        The lowest level that reliably turns the light on.


        This will require some experimentation to get right: Setting it too low will mean the light
        sometimes won't turn on, but setting it higher than necessary will result in a brighter
        flash when first turned on below the minimum level.
      default: 50
      selector:
        number: { min: 0, max: 255 }

    min_ignite_time:
      name: Minimum time needed to turn light on
      description: >-
        Extra time to delay before dimming the light back to the desired level. This is in addition to
        the natural delay from the speed HomeAssistant executes the automation steps.
      default: 10
      selector:
        number: { min: 0, max: 1000, step: 5, unit_of_measurement: 'milliseconds' }

    min_brightness:
      name: Minimum level allowed
      description: >-
        The absolute lowest level the light is ever allowed to be set to.
        If set to a lower value at any point, it will trigger the light to
        go to minimum ignite then be set to this value.
      default: 0
      selector:
        number: { min: 0, max: 255 }

mode: single # single needed to prevent this script from triggering itself
max_exceeded: silent

variables:
  min_ignite_brightness: !input min_ignite_brightness
  min_ignite_time: !input min_ignite_time
  min_brightness: !input min_brightness

trigger:
  - platform: state
    entity_id: !input light

action:
  - condition: |
      {{
        trigger.to_state.state == 'on'
        and (
          trigger.from_state.state == 'off'
          and trigger.to_state.attributes.brightness < min_ignite_brightness
        )
        or
        (
          trigger.to_state.attributes.brightness < min_brightness
        )
      }}

  - alias: Increase to minimum ignite brightness
    service: light.turn_on
    target: { entity_id: !input light }
    data: { brightness: !input min_ignite_brightness }

  - if:
      - condition: template
        value_template: "{{ min_ignite_time|int > 0 }}"
    then:
      - delay: { milliseconds: !input min_ignite_time }

  # enforce min_brightness
  - variables:
      target_brightness: "{{ [ trigger.to_state.attributes.brightness, min_brightness ]  | max }}"

  - alias: Set to target brightness
    service: light.turn_on
    target: { entity_id: !input light }
    data: { brightness: "{{ target_brightness }}" }
