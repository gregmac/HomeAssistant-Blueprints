blueprint:
  name: "Moes Smart Knob"
  domain: automation
  description: >
    
  author: gregmac
  source_url: https://github.com/gregmac/HomeAssistant-Blueprints/blob/main/moes_smart_knob.yaml

  input:
    #! knob:
    #!   name: Control knob
    #!   description: The knob to be configured
    #!   selector:
    #!     device:
    #!       manufacturer: TuYa
    #!       model: Smart knob (ERS-10TZBVK-AA)
    #!       multiple: false

    mqtt_topic:
      name: Knob
      description: >-
        
      default: mqtt/knob_name
      selector:
        text:

    light_normal:
      name: Light to control
      default: []
      description: >-
        Rotate left/right to control brightness
      selector:
        entity: 
          domain: light

    command_brightness_step_down:         { default: [], selector: { action: {} }, name: 'Custom Action: Rotate Left (Command mode)' }
    command_brightness_step_up:           { default: [], selector: { action: {} }, name: 'Custom Action: Rotate Right (Command mode)' }
    command_color_temperature_step_down:  { default: [], selector: { action: {} }, name: 'Custom Action: Hold + Rotate Left (Command mode)' }
    command_color_temperature_step_up:    { default: [], selector: { action: {} }, name: 'Custom Action: Hold + Rotate Right (Command mode)' }
    command_toggle:                       { default: [], selector: { action: {} }, name: 'Custom Action: Single press (Command mode)' }
    command_hue_move:                     { default: [], selector: { action: {} }, name: 'Custom Action: Hold for 3 seconds (Command mode)' }
    command_hue_stop:                     { default: [], selector: { action: {} }, name: 'Custom Action: Stop holding (Command mode)' }

    event_rotate_right:                   { default: [], selector: { action: {} }, name: 'Custom Action: Rotate Right (Event mode)' }
    event_rotate_left:                    { default: [], selector: { action: {} }, name: 'Custom Action: Rotate Left (Event mode)' }
    event_single:                         { default: [], selector: { action: {} }, name: 'Custom Action: Single Press (Event mode)' }
    event_double:                         { default: [], selector: { action: {} }, name: 'Custom Action: Double Press (Event mode)' }
    event_hold:                           { default: [], selector: { action: {} }, name: 'Custom Action: Hold (Event mode)' }

    mode_change:                          { default: [], selector: { action: {} }, name: 'Custom Action: Mode changed (Triple click)' }

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

action:
  - variables:
      action: "{{ trigger.payload_json.action }}"
      step_size:  "{{ trigger.payload_json.action_step_size }}"
      # note: action_transition_time 0.1 to 0.3 depending on how fast knob turned

  - parallel:
      - choose:
          - conditions: "{{ action == 'brightness_step_down' }}"
            sequence:
              - service: light.turn_on
                entity_id: !input light_normal
                data: { brightness_step_pct: "{{ -1 * step_size }}" }
          - conditions: "{{ action == 'brightness_step_up' }}"
            sequence:
              - service: light.turn_on
                entity_id: !input light_normal
                data: { brightness_step_pct: "{{ step_size }}" }

      - choose:
          # mode change
          - { conditions: "{{ action == null }}",                           sequence: !input mode_change }

          # command mode
          - { conditions: "{{ action == 'brightness_step_down' }}",         sequence: !input command_brightness_step_down }
          - { conditions: "{{ action == 'brightness_step_up' }}",           sequence: !input command_brightness_step_up }
          - { conditions: "{{ action == 'color_temperature_step_down' }}",  sequence: !input command_color_temperature_step_down }
          - { conditions: "{{ action == 'color_temperature_step_up' }}",    sequence: !input command_color_temperature_step_up }
          - { conditions: "{{ action == 'toggle' }}",                       sequence: !input command_toggle }
          - { conditions: "{{ action == 'hue_move' }}",                     sequence: !input command_hue_move }
          - { conditions: "{{ action == 'hue_stop' }}",                     sequence: !input command_hue_stop }

          # event mode
          - { conditions: "{{ action == 'rotate_right' }}",                 sequence: !input event_rotate_right }
          - { conditions: "{{ action == 'rotate_left' }}",                  sequence: !input event_rotate_left }
          - { conditions: "{{ action == 'single' }}",                       sequence: !input event_single }
          - { conditions: "{{ action == 'double' }}",                       sequence: !input event_double }
          - { conditions: "{{ action == 'hold' }}",                         sequence: !input event_hold }

