blueprint:
  name: "Dimmer Minimum Ignite Level"
  author: gregmac
  domain: automation
  description: >
    Ensures that when a light is turned on to a brightness that is too low to make it actually light up,
    that it is temporarily set to a higher value (to get it to turn on) before being lowered back down
    to the desired brightness.


    For example, if a LED bulb is first turned on to 3%, it often won't light up at all. This automation
    will set it to 20% (configurable) for about a second, before dimming it back down to 3%, where it
    will stay light at a low level.


    This happens based on state change, so works with lights no matter how they are controlled, including
    other automations and scenes.

  input:
    light:
      name: Light
      description: The light to be controlled
      selector:
        entity:
          domain: light

    min_on_brightness:
      name: Minimum level needed to turn light on
      description: |
        The lowest level that reliably turns the light on. This will require some experimentation to get right.
        Setting it too low will mean the light sometimes won't turn on, but setting it higher than
        necessary will result in a brighter flash when it first turns on.
      default: 20
      selector:
        number: { min: 0, max: 100, unit_of_measurement: '%' }

    min_on_time:
      name: Minimum time needed to turn light on
      description: |
        Extra time to delay before dimming the light back to the desired level. Note that there is some natural delay
        in the automation execution, so this may not be necessary at all.
      default: 10
      selector:
        number: { min: 0, max: 1000, step: 5, unit_of_measurement: 'milliseconds' }

mode: single
max_exceeded: silent

variables:
  light: !input light
  min_on_brightness: !input min_on_brightness
  min_on_time: !input min_on_time

trigger:
  - platform: state
    entity_id: !input light
    from: "off"
    to: "on"

action:
  - if:
      - condition: template
        value_template: "{{ trigger.to_state.attributes.brightness < min_on_brightness }}"
    then:
      - service: light.turn_on
        target: { entity_id: !input light }
        data: { brightness_pct: !input min_on_brightness }

      - if:
          - condition: template
            value_template: "{{ min_on_time|int > 0 }}"
        then:
          - delay: { milliseconds: !input min_on_time }

      - service: light.turn_on
        target: { entity_id: !input light }
        data: { brightness: "{{ trigger.to_state.attributes.brightness }}" }
