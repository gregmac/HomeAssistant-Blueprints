blueprint:
  name: "Appliance Job Complete Notification"
  author: gregmac
  domain: automation
  description: >
    Send notification of the job completion of a Washer/Dryer/etc to
    a couple of notification services.

  input:
    job_state:
      name: Appliance State
      description: |
        The sensor with job state belonging to the appliance to be monitored.
      selector:
        entity:
          domain: sensor

    activation_switch:
      name: Activation switch
      description: |
        An optional input to control if the notification is enabled.
        This can be used with **Automatically deactivation next notification**
        to have an only-once notification, that has to be enabled each time.
      default: []
      selector:
        entity:
          domain: input_boolean

    notify1_type: 
      name: "Notification 1: Type"
      description: >
        Service name to use for notification.
        
        
        If entering a custom value, this should be the direct service name, for example `notify.cell_phone_1`.
      default: none.none
      selector:
        select:
          options:
            - value: none.none # passes template valdiation, but doesn't get executed
              label: "Disabled"
            - value: notify.google_assistant_sdk
              label: "Send a notification with notify.google_assistant_sdk"
          custom_value: true

    notify1_targets:
      name: "Notification 1: Targets(s) to notify"
      description: |
        Optional, and depends on **Notification type**.
        Area to notify, blank usually means "everywhere".
      default: []
      selector:
        area:
          multiple: true

    notify2_type: 
      name: "Notification 2: Type"
      description: >
        Optional. Service name to use for notification.
        
        
        If entering a custom value, this should be the direct service name, for example `notify.cell_phone_1`.
      default: none.none
      selector:
        select:
          options:
            - value: none.none
              label: "Disabled"
            - value: notify.notify
              label: "Send a notification with notify.notify"
          custom_value: true

    notify2_targets:
      name: "Notification 2: Targets(s) to notify"
      description: |
        Optional. Depends on the **Notification type**. Often
        means "areas" and leaving blank means "everywhere".
      default: []
      selector:
        text:

    deactivate_on_complete:
      name: Automatically deactivation next notification
      description: |
        Turns off the **Activation switch** after notifying once.
        This allows selectively turning on the notification each time you want to use it.
        When this is enabled, the switch also automatically turns off
        after **Maximum time to wait**.
      default: true
      selector:
        boolean:

    max_wait:
      name: Maximum time to wait
      description: |
        If **Automatically deactivation next notification** is on, and the appliance has 
        not completed in this time after turning on the **Activation switch**,
        the notification is turned off anyways.
      default: { hours: 6 }
      selector:
        duration:

mode: restart

trigger:
  - id: job_completed
    platform: state
    entity_id: !input job_state
    to:
      - finish
      - finished
      - complete
      - completed
      - done

  - platform: state
    entity_id: !input activation_switch

variables:
  activation_switch: !input activation_switch
  job_state: !input job_state
  deactivate_on_complete: !input deactivate_on_complete
  notify1_type: !input notify1_type
  notify2_type: !input notify2_type

action:
  - variables:
      is_trig: "{{ trigger.entity_id == activation_switch }}"
      is_deactivate_on_complete: "{{ deactivate_on_complete }}"
      is_state: "{{  trigger.to_state.state == 'on' }}"

  - choose:
      - alias: "Job completed"
        conditions: "{{ trigger.entity_id == job_state }}"
        sequence:
          - variables:
              job_device_id: "{{ device_id(job_state) }}"
              job_device_name: "{{ device_attr(job_device_id, 'name') }}"
              notification_message: |
                {%- if job_device_name -%}
                  The {{ job_device_name }} has finished
                {%- else -%}
                  {{ this.attributes.friendly_name }}
                {%- endif -%}

          - service: logbook.log
            data:
              name: "{{ this.attributes.friendly_name }}"
              message: "{{ notification_message }}"
              entity_id: !input job_state

          # - service: notify.google_assistant_sdk
          #   data:
          #     message: "{{ notification_message }}"
          #     target: !input notify_areas

          - if:
              - condition: template
                value_template: "{{ notify1_type and notify1_type != 'none.none'  }}"
            then:
              - service: !input notify1_type
                data:
                  message: "{{ notification_message }}"
                  target: !input notify1_targets

          - if:
              - condition: template
                value_template: "{{ notify2_type and notify2_type != 'none.none' }}"
            then:
              - service: !input notify2_type
                data:
                  message: "{{ notification_message }}"
                  target: !input notify2_targets

          - if:
              - condition: template
                value_template: "{{ deactivate_on_complete }}"
            then:
              - service: input_boolean.turn_off
                target: { entity_id: !input activation_switch }

      - alias: "Deactivate delay"
        conditions: |
          {{
            deactivate_on_complete 
            and trigger.entity_id == activation_switch 
            and trigger.to_state.state == 'on'
          }}
        sequence:
          # delay for our waiting time
          # due to mode:restart, if the job completes in this time, it will interrupt this delay
          - delay: !input max_wait

          - service: logbook.log
            data:
              name: "{{ this.attributes.friendly_name }}"
              message: "Timeout expired without recieving job completion from {{ job_state }}. Disabling {{ activation_switch }}."
              entity_id: !input activation_switch 

          # disable notification
          - service: input_boolean.turn_off
            target: { entity_id: !input activation_switch }

