blueprint:
  name: "Motion Trigger with Override"
  description: >-
    Control a light or switch with motion (or other sensors), including automatically turning them off.


    If the light is manually controlled, motion events are disabled for an amount of time.
  # TODO:
  # - Docs about manually setting timer values
  # - Sun
  # - Schedule?
  # - Custom actions
  # - brightness
  # - transition on/off
  domain: automation
  source_url: https://github.com/gregmac/HomeAssistant-Blueprints/blob/main/motion_trigger.yaml

  input:
    controlled_entity:
      name: Controlled Light/Switch
      description: The light or switch to be controlled by the motion sensor(s).
      selector:
        entity: 
          domain: [switch,light,input_boolean]

    trigger_entity:
      name: Trigger(s)
      description: >-
        Entities that cause the light to turn on. This is usually motion sensors or door contacts, but can be any type of on/off trigger.


        Anytime a trigger turns **on**, the timer will be reset to the **Off Timeout** value. **off** values
        are ignored. After the **Off Timeout** lights will automatically turn off.
      selector:
        entity: 
          domain: [ binary_sensor, input_boolean ]
          multiple: true

    off_timer:
      name: Off Timer
      description: >-
        Timer helper entity that holds the countdown for motion.


        This must be created manually in [**Settings → Devices → Helpers**](../../helpers),
        and must only be used for this automation.
      selector:
        entity: 
          domain: timer

    off_timeout:
      name: Off Timeout
      description: >
        Time from the last motion event after which the lights are turned off.
      default: {minutes: 5}
      selector:
        duration:

    cooldown_entity:
      name: Cooldown Triggers
      default: []
      description: |
        Any additional controls that trigger a cooldown period during which this automation won't turn 
        the **Controlled Light/Switch** either on or off.
      selector:
        entity: 
          domain: [switch,light,input_boolean]

    cooldown_timer:
      name: Cooldown Timer
      description: >
        Optional. Timer helper entity that holds the countdown for cooldown.


        This must be created manually in [**Settings → Devices → Helpers**](../../helpers),
        and must only be used for this automation.
      default: []
      selector:
        entity: 
          domain: timer

    on_cooldown_timeout:
      name: Switched On Cooldown Time
      description: >-
        Amount of time to suspend automatically turning off the lights for if the switch is manually turned on.


        After this time expires, the **Motion Timeout** will be activated, shutting off the lights.
      default: {hours: 1}
      selector:
        duration:

    off_cooldown_timeout:
      name: Switched Off Cooldown Time
      description: >-
        Amount of time to ignore trigger events for after switch is manually turned off.
      default: {minutes: 1}
      selector:
        duration:

mode: queued
max_exceeded: silent

variables:
  cooldown_timer: !input cooldown_timer

trigger:
  - id: switch_on_trigger
    platform: state
    entity_id: !input controlled_entity
    to: 'on'

  - id: switch_off_trigger
    platform: state
    entity_id: !input controlled_entity
    to: 'off'

  - id: cooldown_entity_on_trigger
    platform: state
    entity_id: !input cooldown_entity
    to: 'on'

  - id: cooldown_entity_off_trigger
    platform: state
    entity_id: !input cooldown_entity
    to: 'off'

  - id: motion_trigger
    platform: state
    entity_id: !input trigger_entity
    to: 'on'

  - id: off_timer_trigger
    platform: state
    entity_id: !input off_timer
    from: active
    to: idle

  - id: cooldown_timer_trigger
    platform: state
    entity_id: !input cooldown_timer
    from: active
    to: idle

condition:
  - or:
      - alias: Switch only if not triggered by this automation
        and:
          - condition: trigger
            id: 
              - switch_on_trigger
              - switch_off_trigger
              - cooldown_entity_on_trigger
              - cooldown_entity_off_trigger
          - alias: 'Not triggered by self'
            condition: template
            value_template: "{{ this.context.id != trigger.to_state.context.id }}"

      - alias: Always allow cooldown trigger
        condition: trigger
        id: cooldown_timer_trigger

      - alias: Motion and motion timeout only if not in cooldown
        and:
          - condition: template
            value_template: "{{ states(cooldown_timer|string) != 'active' }}"
          - condition: trigger
            id:
              - motion_trigger
              - off_timer_trigger

action:
  - choose:
      - alias: Manually switched on
        conditions: [ { condition: trigger, id: [ switch_on_trigger, cooldown_entity_on_trigger ] } ]
        sequence:
          - alias: (Re)start cooldown timer
            service: timer.start
            data: { duration: !input on_cooldown_timeout }
            target: { entity_id: !input cooldown_timer }
          - alias: Pause motion timer
            service: timer.pause
            target: { entity_id: !input off_timer }

      - alias: Manually switched off
        conditions: [ { condition: trigger, id: [ switch_off_trigger, cooldown_entity_off_trigger ] } ]
        sequence:
          - alias: (Re)start cooldown timer
            service: timer.start
            data: { duration: !input off_cooldown_timeout }
            target: { entity_id: !input cooldown_timer }
          - alias: Pause motion timer
            service: timer.pause
            target: { entity_id: !input off_timer }

      - alias: Motion triggered
        conditions: { condition: trigger, id: motion_trigger }
        sequence:
        
          - alias: Turn on switch
            service: switch.turn_on
            target: { entity_id: !input controlled_entity }
          - alias: Turn on light
            service: light.turn_on
            target: { entity_id: !input controlled_entity }
          - alias: Turn on boolean
            service: input_boolean.turn_on
            target: { entity_id: !input controlled_entity }

          - alias: (Re)start motion timer
            service: timer.start
            data: { duration: !input off_timeout }
            target: { entity_id: !input off_timer }

      - alias: Cooldown complete
        conditions: { condition: trigger, id: cooldown_timer_trigger }
        sequence:
          - alias: (Re)start motion timer
            service: timer.start
            data: { duration: !input off_timeout }
            target: { entity_id: !input off_timer }

      - alias: Motion timeout
        conditions: { condition: trigger, id: off_timer_trigger }
        sequence:
          - alias: Turn off switch
            service: switch.turn_off
            target: { entity_id: !input controlled_entity }
          - alias: Turn off light
            service: light.turn_off
            target: { entity_id: !input controlled_entity }
          - alias: Turn off boolean
            service: input_boolean.turn_off
            target: { entity_id: !input controlled_entity }
